/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.vocabularybuilder;



import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;


import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import java.io.FileReader;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.time.LocalDateTime;
import java.util.ArrayList;


import java.util.ListIterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;




public class Main extends javax.swing.JFrame {
    ArrayList<String> sentence = new ArrayList<>();
    ArrayList<String> time = new ArrayList<>();
    String content = "";
    
    /*  *********************/
    WordProcessing objectOfWordProcessing = new WordProcessing();
    ArrayList<String> timeAndSentencesList = new ArrayList<>();
    ArrayList<String> sentenceList = new ArrayList<>();
    ArrayList<String> timeList = new ArrayList<>();
    ArrayList<String> beginningTimeList = new ArrayList<>();
    ArrayList<String> endingTimeList = new ArrayList<>();
    ArrayList<Integer> idForStudying;
    ListIterator<Integer> iteratorForStudying;
    int isLearnedForStudying;
    String isTvSeries;
    String nameOfTvsOrMovie;
    String season;
    String episode;
    String seasonAndEpisode;
    String currentSentence;
    String currentWord;
    String startingTime;
    String endingTime;
    String typeOfWord;
    String meaning;
    String lastWordMeaningSearched = "";
    String previousMeaning = " ";
    int index;
    String phrasalVerb;
    
    
    
    String app_id = "";
    String app_key = "";
    
    
    int globalIndexForSentences = 0;
    int globalIndexForWords = 0;
    int maxIndexForSentences;
    int maxIndexForWords;
    String sentenceToBeSplitted = "";
    ArrayList<String> splittedWord;
    
    boolean isClickedToStudying = false;
    boolean isLastClickedToNext;
    boolean isLastClickedToPrevious;
    public static String header;
    
    
    Connection con = null;
    PreparedStatement ps = null;
    
    DatabaseQueries dbQuery = new DatabaseQueries();
    
    Oxford  oxfordHere = new Oxford();
    
    
    

    /**
     * Creates new form Main
     */
    public Main() {
        this.sentence = new ArrayList();
        initComponents();
        
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        subtitleChooser = new javax.swing.JButton();
        subtitlePath = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nameOfTvSeriesOrMovieTextField = new javax.swing.JTextField();
        isTvSeriesRadioButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        isMovieRadioButton = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        seasonComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        episodeComboBox = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        startSavingButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        sentenceField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        wordField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        pharasalVerbTextField = new javax.swing.JTextField();
        savingPharasal = new javax.swing.JButton();
        nextWordButton = new javax.swing.JButton();
        savingWordButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        oxfordApiId = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        oxfordApiKey = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        meaningTextField = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        StudyingJPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        alreadyKnownWordsLabel = new javax.swing.JLabel();
        learnedWordsLabel = new javax.swing.JLabel();
        beingLearnedWordsLabel = new javax.swing.JLabel();
        movieNamesComboBox = new javax.swing.JComboBox<>();
        seasonAndEpisodeComboBox = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        nextButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        studyingTvSeriesRadioButton = new javax.swing.JRadioButton();
        studyingMovieRadioButton = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        wordConditionComboBox = new javax.swing.JComboBox<>();
        wordLabelForStudying = new javax.swing.JLabel();
        sentenceLabelForStudying = new javax.swing.JLabel();
        meaningLabelForStudying = new javax.swing.JLabel();
        showMeaningButton = new javax.swing.JButton();
        saveAsLearned = new javax.swing.JButton();
        unsaveAsLearned = new javax.swing.JButton();
        getPdfButton = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jTabbedPane1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jTabbedPane1AncestorMoved(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
        });

        jLabel1.setText("Subtitle Location : ");

        subtitleChooser.setText("Browse");
        subtitleChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtitleChooserActionPerformed(evt);
            }
        });

        jLabel3.setText("Name of Tv Series/Movie : ");

        buttonGroup1.add(isTvSeriesRadioButton);
        isTvSeriesRadioButton.setText("Tv Series");
        isTvSeriesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isTvSeriesRadioButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Is it a movie/Tv Series ?  :");

        buttonGroup1.add(isMovieRadioButton);
        isMovieRadioButton.setText("Movie");
        isMovieRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isMovieRadioButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Season : ");

        seasonComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        seasonComboBox.setAutoscrolls(true);
        seasonComboBox.setEnabled(false);
        seasonComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Episode : ");

        episodeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        episodeComboBox.setAutoscrolls(true);
        episodeComboBox.setEnabled(false);

        startSavingButton.setText("Start Saving");
        startSavingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSavingButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Sentence : ");

        jLabel8.setText("Word : ");

        jLabel9.setText("Is there any phrasal verb ?");

        savingPharasal.setText("Save Pharasal Verb");
        savingPharasal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingPharasalActionPerformed(evt);
            }
        });

        nextWordButton.setText("Next");
        nextWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextWordButtonActionPerformed(evt);
            }
        });

        savingWordButton.setText("Save it!");
        savingWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingWordButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Oxford Api Id :");

        oxfordApiId.setText("08ba89f0");
        oxfordApiId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oxfordApiIdActionPerformed(evt);
            }
        });

        jLabel13.setText("Meaning : ");

        jButton1.setText("Get Meaning");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel14.setText("Oxford Api Key :");

        oxfordApiKey.setText("558e943e7629475432af7a9899874b01");
        oxfordApiKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oxfordApiKeyActionPerformed(evt);
            }
        });

        meaningTextField.setColumns(20);
        meaningTextField.setRows(5);
        jScrollPane1.setViewportView(meaningTextField);

        jLabel10.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        jLabel10.setText("Note : If word is not primitive (not singular, has suffix or prefix ), make it  primitive.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(nameOfTvSeriesOrMovieTextField)
                        .addGap(99, 99, 99))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(1, 1, 1)
                                        .addComponent(sentenceField))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pharasalVerbTextField)
                                        .addGap(158, 158, 158))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(isTvSeriesRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(isMovieRadioButton)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(seasonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(episodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 389, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(savingPharasal))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1)
                                            .addComponent(wordField))
                                        .addGap(47, 47, 47)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(nextWordButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(savingWordButton))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addComponent(jButton1)))))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oxfordApiId, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addGap(3, 3, 3)
                                .addComponent(oxfordApiKey, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(startSavingButton))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subtitlePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(subtitleChooser)))
                        .addGap(23, 23, 23))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(subtitleChooser)
                    .addComponent(subtitlePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isTvSeriesRadioButton)
                    .addComponent(jLabel4)
                    .addComponent(isMovieRadioButton)
                    .addComponent(jLabel5)
                    .addComponent(seasonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(episodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameOfTvSeriesOrMovieTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(oxfordApiId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(oxfordApiKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startSavingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(savingPharasal)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(sentenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(pharasalVerbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(wordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nextWordButton)
                        .addComponent(savingWordButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel13)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Word Saving", jPanel1);

        StudyingJPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel15.setText("# of words already known : ");

        jLabel16.setText("#  of words learned : ");

        jLabel17.setText("# of words are being learned : ");

        alreadyKnownWordsLabel.setText("   ");

        learnedWordsLabel.setText("   ");

        beingLearnedWordsLabel.setText("     ");

        movieNamesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                movieNamesComboBoxItemStateChanged(evt);
            }
        });
        movieNamesComboBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                movieNamesComboBoxInputMethodTextChanged(evt);
            }
        });
        movieNamesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieNamesComboBoxActionPerformed(evt);
            }
        });
        movieNamesComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                movieNamesComboBoxPropertyChange(evt);
            }
        });
        movieNamesComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                movieNamesComboBoxKeyPressed(evt);
            }
        });

        seasonAndEpisodeComboBox.setEnabled(false);
        seasonAndEpisodeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                seasonAndEpisodeComboBoxMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                seasonAndEpisodeComboBoxMousePressed(evt);
            }
        });
        seasonAndEpisodeComboBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                seasonAndEpisodeComboBoxInputMethodTextChanged(evt);
            }
        });
        seasonAndEpisodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonAndEpisodeComboBoxActionPerformed(evt);
            }
        });

        jLabel18.setText("Name of TvS/Movie :");

        jLabel19.setText("Season and Episode :");

        jButton2.setText("Start Studying");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        nextButton.setText("NEXT");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jLabel21.setText("Word : ");

        jLabel22.setText("Sentence :");

        jLabel23.setText("Meaning :");

        jButton3.setText("PREVIOUS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(studyingTvSeriesRadioButton);
        studyingTvSeriesRadioButton.setText("TV Series");
        studyingTvSeriesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studyingTvSeriesRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(studyingMovieRadioButton);
        studyingMovieRadioButton.setText("Movie");
        studyingMovieRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studyingMovieRadioButtonActionPerformed(evt);
            }
        });

        jLabel20.setText("Condition : ");

        wordConditionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Words", "Learned Words", "Unknown Words" }));

        wordLabelForStudying.setText("     ");

        sentenceLabelForStudying.setText("     ");

        meaningLabelForStudying.setText("        ");

        showMeaningButton.setText("Show Meaning");
        showMeaningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMeaningButtonActionPerformed(evt);
            }
        });

        saveAsLearned.setText("Save As Learned");
        saveAsLearned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsLearnedActionPerformed(evt);
            }
        });

        unsaveAsLearned.setText("Unsave As Learned");
        unsaveAsLearned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unsaveAsLearnedActionPerformed(evt);
            }
        });

        getPdfButton.setText("Choose Location & Save Pdf");
        getPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPdfButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StudyingJPanelLayout = new javax.swing.GroupLayout(StudyingJPanel);
        StudyingJPanel.setLayout(StudyingJPanelLayout);
        StudyingJPanelLayout.setHorizontalGroup(
            StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(StudyingJPanelLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alreadyKnownWordsLabel)
                .addGap(41, 41, 41)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(learnedWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beingLearnedWordsLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StudyingJPanelLayout.createSequentialGroup()
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveAsLearned)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unsaveAsLearned))
                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(StudyingJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(wordLabelForStudying)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nextButton))
                            .addGroup(StudyingJPanelLayout.createSequentialGroup()
                                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sentenceLabelForStudying))
                                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(meaningLabelForStudying)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(showMeaningButton, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addGap(120, 120, 120))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StudyingJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(getPdfButton))
                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(16, 16, 16)
                        .addComponent(movieNamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(studyingMovieRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studyingTvSeriesRadioButton)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seasonAndEpisodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordConditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addGap(116, 116, 116))
        );
        StudyingJPanelLayout.setVerticalGroup(
            StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StudyingJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(alreadyKnownWordsLabel)
                    .addComponent(learnedWordsLabel)
                    .addComponent(beingLearnedWordsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(movieNamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(seasonAndEpisodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(studyingTvSeriesRadioButton)
                    .addComponent(studyingMovieRadioButton)
                    .addComponent(jLabel20)
                    .addComponent(wordConditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getPdfButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(jLabel21)
                    .addComponent(wordLabelForStudying))
                .addGap(3, 3, 3)
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                        .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(sentenceLabelForStudying))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(meaningLabelForStudying)))
                    .addGroup(StudyingJPanelLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showMeaningButton)))
                .addGap(18, 18, 18)
                .addGroup(StudyingJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAsLearned)
                    .addComponent(unsaveAsLearned))
                .addContainerGap(162, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Studying", StudyingJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        movieNamesComboBox.removeAllItems();
        
        
        if(true){
            String numberOfAlreadyKnownWords =  String.valueOf(dbQuery.wordCounter(true, 2));
            String numberOfLearnedWords = String.valueOf(dbQuery.wordCounter(false, 1));
            String numberOfWordsBeingLearned = String.valueOf(dbQuery.wordCounter(false, 0));

            alreadyKnownWordsLabel.setText(numberOfAlreadyKnownWords);
            learnedWordsLabel.setText(numberOfLearnedWords);
            beingLearnedWordsLabel.setText(numberOfWordsBeingLearned);

            // Movie Combobox filled with movie or tv series names

            Object[] namesOfMovies = dbQuery.returnTvsOrMovieNames().toArray();
            
            for (int i = 0; i < namesOfMovies.length; i++) {
                String nameOfMovie = (String) namesOfMovies[i];
                if(i == 0){
                    movieNamesComboBox.addItem("All Movies & Tv Series");
                }
                movieNamesComboBox.addItem((String) nameOfMovie);

            }

            isClickedToStudying = true;

        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane1AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTabbedPane1AncestorMoved

    }//GEN-LAST:event_jTabbedPane1AncestorMoved

    private void unsaveAsLearnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unsaveAsLearnedActionPerformed
        
        dbQuery.updateLearned(index, 0);
        unsaveAsLearned.setEnabled(false);
        saveAsLearned.setEnabled(true);

        String numberOfLearnedWords = String.valueOf(dbQuery.wordCounter(false, 1));
        String numberOfWordsBeingLearned = String.valueOf(dbQuery.wordCounter(false, 0));
        learnedWordsLabel.setText(numberOfLearnedWords);
        beingLearnedWordsLabel.setText(numberOfWordsBeingLearned);

    }//GEN-LAST:event_unsaveAsLearnedActionPerformed

    private void saveAsLearnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsLearnedActionPerformed
        
        dbQuery.updateLearned(index, 1);
        saveAsLearned.setEnabled(false);
        unsaveAsLearned.setEnabled(true);

        String numberOfLearnedWords = String.valueOf(dbQuery.wordCounter(false, 1));
        String numberOfWordsBeingLearned = String.valueOf(dbQuery.wordCounter(false, 0));
        learnedWordsLabel.setText(numberOfLearnedWords);
        beingLearnedWordsLabel.setText(numberOfWordsBeingLearned);
    }//GEN-LAST:event_saveAsLearnedActionPerformed

    private void showMeaningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMeaningButtonActionPerformed
        meaningLabelForStudying.setVisible(true);

    }//GEN-LAST:event_showMeaningButtonActionPerformed

    private void studyingMovieRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studyingMovieRadioButtonActionPerformed
        seasonAndEpisodeComboBox.setEnabled(false);
    }//GEN-LAST:event_studyingMovieRadioButtonActionPerformed

    private void studyingTvSeriesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studyingTvSeriesRadioButtonActionPerformed
        seasonAndEpisodeComboBox.removeAllItems();
        seasonAndEpisodeComboBox.setEnabled(true);
        
        Object[] seasonAndEpisodes = dbQuery.returnSeasonAndEpisodes(movieNamesComboBox.getSelectedItem().toString()).toArray();

        for (int i = 0 ; i < seasonAndEpisodes.length ; i++) {
            if(i == 0){
                seasonAndEpisodeComboBox.addItem("ALL");
            }
            seasonAndEpisodeComboBox.addItem((String) seasonAndEpisodes[i]);
            
        }
    }//GEN-LAST:event_studyingTvSeriesRadioButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        meaningLabelForStudying.setVisible(false);
        isLastClickedToPrevious = true;

        if(isLastClickedToNext){
            iteratorForStudying.previous();
            isLastClickedToNext = false;

        }

        if(iteratorForStudying.hasPrevious()){
            index = iteratorForStudying.previous();

            wordLabelForStudying.setText(dbQuery.returnWordForStudying(index));
            sentenceLabelForStudying.setText(dbQuery.returnSentenceForStudying(index));
            meaningLabelForStudying.setText(dbQuery.returnMeaningForStudying(index));
            isLearnedForStudying = dbQuery.returnIfLearnedForStudying(index);

            switch (isLearnedForStudying) {
                case 1:
                unsaveAsLearned.setEnabled(true);
                saveAsLearned.setEnabled(false);
                break;
                case 0:
                unsaveAsLearned.setEnabled(false);
                saveAsLearned.setEnabled(true);
                break;
                default:
                JOptionPane.showMessageDialog(null, "DB query exception");
                break;
            }

        }else{
            
            
            JOptionPane.showMessageDialog(null, "no more previous words to study");

            
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        meaningLabelForStudying.setVisible(false);
        isLastClickedToNext = true;

        if(isLastClickedToPrevious){
            iteratorForStudying.next();
            isLastClickedToPrevious = false;

        }

        if(iteratorForStudying.hasNext()){
            index = iteratorForStudying.next();

            wordLabelForStudying.setText(dbQuery.returnWordForStudying(index));
            sentenceLabelForStudying.setText(dbQuery.returnSentenceForStudying(index));
            meaningLabelForStudying.setText(dbQuery.returnMeaningForStudying(index));
            isLearnedForStudying = dbQuery.returnIfLearnedForStudying(index);

            switch (isLearnedForStudying) {
                case 1:
                unsaveAsLearned.setEnabled(true);
                saveAsLearned.setEnabled(false);
                break;
                case 0:
                unsaveAsLearned.setEnabled(false);
                saveAsLearned.setEnabled(true);
                break;
                default:
                JOptionPane.showMessageDialog(null, "DB query exception..");
                break;
            }

        }else{
            JOptionPane.showMessageDialog(null, "no more next words to study");
            
        }

    }//GEN-LAST:event_nextButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        boolean isNameOfMovieSelected;
        boolean isMovieRadioButtonSelected;
        boolean isTvsRadioButtonSelected;
        boolean isSeasonAndEpisodeSelected;
        String nameOfMovie = movieNamesComboBox.getSelectedItem().toString();

        String wordCondition = wordConditionComboBox.getSelectedItem().toString();

        int learned1 = 0;
        int learned2 = 0;

        switch (wordCondition) {
            case "All Words":
            learned1 = 1;
            learned2 = 0;
            break;
            case "Learned Words":
            learned1 = 1;
            learned2 = 1;
            break;
            case "Unknown Words":
            learned1 = 0;
            learned2 = 0;
            break;
            default:
            break;
        }

        if(nameOfMovie.equals("All Movies & Tv Series")){

            idForStudying = dbQuery.returnIdForAllMoviesAndTvsStudying(learned1, learned2);

            iteratorForStudying = idForStudying.listIterator();
            if(iteratorForStudying.hasNext()){
                index = iteratorForStudying.next();
                
                wordLabelForStudying.setText(dbQuery.returnWordForStudying(index));
                sentenceLabelForStudying.setText(dbQuery.returnSentenceForStudying(index));
                isLearnedForStudying = dbQuery.returnIfLearnedForStudying(index);
                switch (isLearnedForStudying) {
                    case 1:
                    unsaveAsLearned.setEnabled(true);
                    saveAsLearned.setEnabled(false);
                    break;
                    case 0:
                    unsaveAsLearned.setEnabled(false);
                    saveAsLearned.setEnabled(true);
                    break;
                    default:
                    JOptionPane.showMessageDialog(null, "DB query exception");
                    break;
                }
            }

            return;
        }

        try {
            isNameOfMovieSelected = !movieNamesComboBox.getSelectedItem().toString().isBlank();
        } catch (Exception e) {
            isNameOfMovieSelected = false;
        }

        try {
            isSeasonAndEpisodeSelected = !seasonAndEpisodeComboBox.getSelectedItem().toString().isBlank();

        } catch (Exception e) {
            isSeasonAndEpisodeSelected = false;
        }

        isMovieRadioButtonSelected = studyingMovieRadioButton.isSelected();
        isTvsRadioButtonSelected = studyingTvSeriesRadioButton.isSelected();

        if(!isNameOfMovieSelected){
            return;
        }

        if(isMovieRadioButtonSelected || isTvsRadioButtonSelected){

        }else{
            
            JOptionPane.showMessageDialog(null, "Movie or Tv Series should be selected.");
            return;
        }

        if(isTvsRadioButtonSelected){
            if(!isSeasonAndEpisodeSelected){
                return;
            }

        }

        //String nameOfMovie = movieNamesComboBox.getSelectedItem().toString();
        String seasonAndEpisode;

        if(isMovieRadioButtonSelected){
            seasonAndEpisode = "MOVIE";
        }else if (isTvsRadioButtonSelected) {
            seasonAndEpisode = seasonAndEpisodeComboBox.getSelectedItem().toString();
        }else{
            return;
        }

        if(seasonAndEpisode.equals("ALL")){
            idForStudying = dbQuery.returnIdOfAllEpisodesForStudying(learned1, learned2, nameOfMovie);
        }else{

            idForStudying = dbQuery.returnIdForStudying(learned1, learned2, nameOfMovie, seasonAndEpisode);
        }

        iteratorForStudying = idForStudying.listIterator();
        if(iteratorForStudying.hasNext()){
            index = iteratorForStudying.next();
           
            wordLabelForStudying.setText(dbQuery.returnWordForStudying(index));
            sentenceLabelForStudying.setText(dbQuery.returnSentenceForStudying(index));
            isLearnedForStudying = dbQuery.returnIfLearnedForStudying(index);
            switch (isLearnedForStudying) {
                case 1:
                unsaveAsLearned.setEnabled(true);
                saveAsLearned.setEnabled(false);
                break;
                case 0:
                unsaveAsLearned.setEnabled(false);
                saveAsLearned.setEnabled(true);
                break;
                default:
                
                JOptionPane.showMessageDialog(null, "DB query exception");
                break;
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void seasonAndEpisodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonAndEpisodeComboBoxActionPerformed

    }//GEN-LAST:event_seasonAndEpisodeComboBoxActionPerformed

    private void seasonAndEpisodeComboBoxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_seasonAndEpisodeComboBoxInputMethodTextChanged

    }//GEN-LAST:event_seasonAndEpisodeComboBoxInputMethodTextChanged

    private void seasonAndEpisodeComboBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seasonAndEpisodeComboBoxMousePressed

    }//GEN-LAST:event_seasonAndEpisodeComboBoxMousePressed

    private void seasonAndEpisodeComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seasonAndEpisodeComboBoxMouseEntered

    }//GEN-LAST:event_seasonAndEpisodeComboBoxMouseEntered

    private void movieNamesComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_movieNamesComboBoxKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_movieNamesComboBoxKeyPressed

    private void movieNamesComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_movieNamesComboBoxPropertyChange

    }//GEN-LAST:event_movieNamesComboBoxPropertyChange

    private void movieNamesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieNamesComboBoxActionPerformed
        buttonGroup2.clearSelection();

    }//GEN-LAST:event_movieNamesComboBoxActionPerformed

    private void movieNamesComboBoxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_movieNamesComboBoxInputMethodTextChanged

    }//GEN-LAST:event_movieNamesComboBoxInputMethodTextChanged

    private void movieNamesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_movieNamesComboBoxItemStateChanged
        
        try {
            String movieName = (String) movieNamesComboBox.getSelectedItem();
            if(movieName.equals("All Movies & Tv Series")){

                studyingMovieRadioButton.setEnabled(false);
                studyingTvSeriesRadioButton.setEnabled(false);
            }else{
                studyingMovieRadioButton.setEnabled(true);
                studyingTvSeriesRadioButton.setEnabled(true);
            }
            
        } catch (Exception e) {
            
        }

    }//GEN-LAST:event_movieNamesComboBoxItemStateChanged

    private void oxfordApiKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oxfordApiKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oxfordApiKeyActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        phrasalVerb = pharasalVerbTextField.getText();
        if(!phrasalVerb.isEmpty()){
            JOptionPane.showMessageDialog(null, "Type meaning of phrasal verb manually");
            return;

        }

        String word = wordField.getText();
        lastWordMeaningSearched = word;
        String apiResponse = oxfordHere.oxfordReturn( word , app_id, app_key);
        meaning = oxfordHere.returnMeaning(apiResponse);
        typeOfWord = oxfordHere.returnType(apiResponse);
        meaningTextField.setText(meaning);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void oxfordApiIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oxfordApiIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oxfordApiIdActionPerformed

    private void savingWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savingWordButtonActionPerformed
        phrasalVerb = pharasalVerbTextField.getText();
        meaning = meaningTextField.getText();

        if(!phrasalVerb.isEmpty() && !meaning.isEmpty()){
            
            JOptionPane.showMessageDialog(null, "Click Save Pharasal Verb button to save it...");
            return;

        }

        currentWord = wordField.getText();
        
        if(lastWordMeaningSearched.equals(currentWord) && !previousMeaning.equals(meaning)) {
            currentSentence = sentenceField.getText();
            startingTime = beginningTimeList.get(globalIndexForSentences);
            endingTime = endingTimeList.get(globalIndexForSentences);

            if(isTvSeries.equals("1")){
                season = seasonComboBox.getSelectedItem().toString();
                episode = episodeComboBox.getSelectedItem().toString();
            }else{
                season = "";
                episode = "";
            }

            boolean isIncludedInDB = dbQuery.isIncludedInDb(currentWord);
            if(!isIncludedInDB){
                // 1 means the word is know, 0 for unknown

                dbQuery.wordSaver(currentWord, meaning, currentSentence, startingTime, endingTime, isTvSeries, seasonAndEpisode, typeOfWord, "0", nameOfTvsOrMovie);
                previousMeaning = meaning;
            }else{
                // put a message here
            }

            boolean loopController = true;

            while(loopController){

                if(globalIndexForWords < (maxIndexForWords-1)){
                    globalIndexForWords++;
                    boolean isIncludedInDBx = dbQuery.isIncludedInDb(splittedWord.get(globalIndexForWords));
                    if(!isIncludedInDBx){
                        wordField.setText(splittedWord.get(globalIndexForWords));
                        loopController = false;
                    }

                }else{
                    if(globalIndexForSentences < (maxIndexForSentences-1)){
                        this.globalIndexForSentences++;

                        globalIndexForWords = 0;
                        currentSentence = sentenceList.get(globalIndexForSentences);
                        splittedWord = objectOfWordProcessing.sentenceToWords(currentSentence);
                        maxIndexForWords = splittedWord.size();
                        boolean isIncludedInDBx = dbQuery.isIncludedInDb(splittedWord.get(globalIndexForWords));
                        if(!isIncludedInDBx){

                            sentenceField.setText(currentSentence);
                            wordField.setText(splittedWord.get(globalIndexForWords));
                            loopController = false;
                        }

                    }else{
                        String message = "No more words in the subtitle file to save...";
                        JOptionPane.showMessageDialog(null, message);
                        loopController = false;
                    }
                }

            }

        }else{

            String message = "Please, first click the Get Meaning Button \n OR \n type primitive word to word field then click the button..\n"
            + "\n For example : \n taught --> teach \n teaches --> teach \n teaching --> teach \n teachers --> teacher";
            JOptionPane.showMessageDialog(null, message);
        }

        meaningTextField.setText("");
    }//GEN-LAST:event_savingWordButtonActionPerformed

    private void nextWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextWordButtonActionPerformed
        phrasalVerb = pharasalVerbTextField.getText();
        meaning = meaningTextField.getText();

        if(!phrasalVerb.isEmpty() && !meaning.isEmpty()){
            
            JOptionPane.showMessageDialog(null, "Click Save Pharasal Verb button to save it...");
            return;

        }

        currentWord = wordField.getText();

        startingTime = beginningTimeList.get(globalIndexForSentences);
        endingTime = endingTimeList.get(globalIndexForSentences);

        boolean isIncludedInDB = dbQuery.isIncludedInDb(currentWord);
        if(!isIncludedInDB){
            // 1 means the word is know, 0 for unknown,2 for already known words
            
            dbQuery.wordSaver(currentWord, "", "", "", "", "", seasonAndEpisode, "", "2",nameOfTvsOrMovie);

        }else{
            
        }

        boolean loopController = true;

        while(loopController){

            if(globalIndexForWords < (maxIndexForWords-1)){
                globalIndexForWords++;
                boolean isIncludedInDBx = dbQuery.isIncludedInDb(splittedWord.get(globalIndexForWords));
                if(!isIncludedInDBx){
                    sentenceField.setText(currentSentence);
                    wordField.setText(splittedWord.get(globalIndexForWords));
                    loopController = false;
                }

            }else{
                if(globalIndexForSentences < (maxIndexForSentences-1)){
                    this.globalIndexForSentences++;

                    globalIndexForWords = 0;
                    currentSentence = sentenceList.get(globalIndexForSentences);
                    splittedWord = objectOfWordProcessing.sentenceToWords(currentSentence);
                    maxIndexForWords = splittedWord.size();

                    boolean isIncludedInDBx = dbQuery.isIncludedInDb(splittedWord.get(globalIndexForWords));
                    if(!isIncludedInDBx){

                        sentenceField.setText(currentSentence);
                        wordField.setText(splittedWord.get(globalIndexForWords));
                        loopController = false;
                    }

                }else{
                    String message = "No more words in the subtitle file to save...";
                    JOptionPane.showMessageDialog(null, message);
                    loopController = false;
                }
            }

        }

        meaningTextField.setText("");
    }//GEN-LAST:event_nextWordButtonActionPerformed

    private void savingPharasalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savingPharasalActionPerformed
        meaning = meaningTextField.getText();
        String phrasalVerb = pharasalVerbTextField.getText();

        if(!dbQuery.isIncludedInDb(phrasalVerb)){
            dbQuery.wordSaver(phrasalVerb, meaning, currentSentence, startingTime, endingTime, isTvSeries, seasonAndEpisode, "phrasal verb", "0", nameOfTvsOrMovie);

        }else{

            
            JOptionPane.showMessageDialog(null, "The pharasal verb is already saved in datebase...");
        }
        /*
        Before saving, it would be nice to check if it is already saved in database.

        */
        //dbQuery.wordSaver(phrasalVerb, meaning, currentSentence, startingTime, endingTime, isTvSeries, seasonAndEpisode, "phrasal verb", "0", nameOfTvsOrMovie);

        meaningTextField.setText("");
        pharasalVerbTextField.setText("");
    }//GEN-LAST:event_savingPharasalActionPerformed

    private void startSavingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSavingButtonActionPerformed

        /*removed because clicking studying tab fill moviename and season combobox, not to refill them*/
        movieNamesComboBox.removeAllItems();
        seasonAndEpisodeComboBox.removeAllItems();
        /*
        1- If anything except season and episode, is empty throw a message to fill all areas and fields!

        */
        app_id = oxfordApiId.getText();
        app_key = oxfordApiKey.getText();
        nameOfTvsOrMovie = nameOfTvSeriesOrMovieTextField.getText().toUpperCase();

        season = seasonComboBox.getSelectedItem().toString();
        episode = episodeComboBox.getSelectedItem().toString();

        if(isTvSeries.equals("1")){
            seasonAndEpisode = "S" + season + "E" + episode;
        }else{
            seasonAndEpisode = "MOVIE";
        }

        outerloop:
        for (String localSentence : sentenceList){

            currentSentence = localSentence;
            splittedWord = objectOfWordProcessing.sentenceToWords(localSentence);
            System.out.println(splittedWord.size());
            maxIndexForWords = splittedWord.size();
            for(String word : splittedWord){
                currentWord = word;
                boolean isIncludedInDB = dbQuery.isIncludedInDb(currentWord);
                if(!isIncludedInDB){
                    sentenceField.setText(currentSentence);
                    wordField.setText(currentWord);

                    break outerloop;
                }

                if(globalIndexForWords < maxIndexForWords){
                    globalIndexForWords++;

                }else{

                    globalIndexForWords = 0;
                }

            }

            if(globalIndexForSentences < maxIndexForSentences){
                globalIndexForSentences++;

            }else{

                String message = "All words in the subtitle file are already saved in the database.";
                JOptionPane.showMessageDialog(null, message);
                break;
            }

        }
        startingTime = beginningTimeList.get(globalIndexForSentences);
        endingTime = endingTimeList.get(globalIndexForSentences);
    }//GEN-LAST:event_startSavingButtonActionPerformed

    private void seasonComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seasonComboBoxActionPerformed

    private void isMovieRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isMovieRadioButtonActionPerformed
        isTvSeries = "0";
        seasonComboBox.setEnabled(false);
        episodeComboBox.setEnabled(false);
    }//GEN-LAST:event_isMovieRadioButtonActionPerformed

    private void isTvSeriesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isTvSeriesRadioButtonActionPerformed
        isTvSeries = "1";
        seasonComboBox.setEnabled(true);
        episodeComboBox.setEnabled(true);
    }//GEN-LAST:event_isTvSeriesRadioButtonActionPerformed

    private void subtitleChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtitleChooserActionPerformed

        timeAndSentencesList.clear();
        sentenceList.clear();
        beginningTimeList.clear();
        endingTimeList.clear();
        content = "";
        globalIndexForSentences = 0;
        globalIndexForWords = 0;
        

        sentenceField.setText("");
        wordField.setText("");

        

        JFileChooser fileChooser = new JFileChooser();
        int showOpenDialog = fileChooser.showOpenDialog(jPanel1);

        // Reading the subtitle file
        if ( showOpenDialog == JFileChooser.APPROVE_OPTION ){
            File file = fileChooser.getSelectedFile();
            subtitlePath.setText(fileChooser.getSelectedFile().getAbsolutePath());

            try(Scanner scanner = new Scanner(new BufferedReader(new FileReader(file)))){

                while(scanner.hasNext()){

                    content +=   scanner.nextLine() + "\n";
                }
                // textAreaOfSubtitle.setText(content);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            //WordProcessing objectOfWordProcessing = new WordProcessing();
            timeAndSentencesList = objectOfWordProcessing.timeAndSentencesSeperator(content);
            sentenceList = objectOfWordProcessing.getSentenceList(timeAndSentencesList);
            beginningTimeList = objectOfWordProcessing.getBeginningTimeList(timeAndSentencesList);
            endingTimeList = objectOfWordProcessing.getEndingTimeList(timeAndSentencesList);
            maxIndexForSentences = sentenceList.size();

        }
        

    }//GEN-LAST:event_subtitleChooserActionPerformed

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseEntered

    private void getPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPdfButtonActionPerformed
        String savingLocation = null;
        String nameOfSavedPdf = "";
        LocalDateTime localDateTime = LocalDateTime.now();
        
                
        
                
        JFileChooser fileChooserForSaving = new JFileChooser();
        fileChooserForSaving.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int showOpenDialog = fileChooserForSaving.showOpenDialog(jPanel1);
       
        
        if ( showOpenDialog == JFileChooser.APPROVE_OPTION ){
            File file = fileChooserForSaving.getSelectedFile();
            
            savingLocation = file.toString();
        }
            
            //****************
        
        boolean isNameOfMovieSelected;
        boolean isMovieRadioButtonSelected;
        boolean isTvsRadioButtonSelected;
        boolean isSeasonAndEpisodeSelected;
        String nameOfMovie = movieNamesComboBox.getSelectedItem().toString();

        String wordCondition = wordConditionComboBox.getSelectedItem().toString();

        int learned1 = 0;
        int learned2 = 0;

        switch (wordCondition) {
            case "All Words":
            learned1 = 1;
            learned2 = 0;
            break;
            case "Learned Words":
            learned1 = 1;
            learned2 = 1;
            break;
            case "Unknown Words":
            learned1 = 0;
            learned2 = 0;
            break;
            default:
            break;
        }
        
        
        
        Document document = new Document(PageSize.A4, 36, 36, 65, 52);
        PdfWriter writer = null;

 
                if(nameOfMovie.equals("All Movies & Tv Series")){
                    header = nameOfMovie;
                    nameOfSavedPdf = nameOfMovie;
                    idForStudying = dbQuery.returnIdForAllMoviesAndTvsStudying(learned1, learned2);
                }else{
                    
                    try {
                        isNameOfMovieSelected = !movieNamesComboBox.getSelectedItem().toString().isBlank();
                    } catch (Exception e) {
                        isNameOfMovieSelected = false;
                    }

                    try {
                            isSeasonAndEpisodeSelected = !seasonAndEpisodeComboBox.getSelectedItem().toString().isBlank();

                    } catch (Exception e) {
                            isSeasonAndEpisodeSelected = false;
                    }

                    isMovieRadioButtonSelected = studyingMovieRadioButton.isSelected();
                    isTvsRadioButtonSelected = studyingTvSeriesRadioButton.isSelected();

                    if(!isNameOfMovieSelected){
                        return;
                    }

                    if(isMovieRadioButtonSelected || isTvsRadioButtonSelected){

                    }else{
                       
                        JOptionPane.showMessageDialog(null, "Movie/Tv Series should be selected.");
                        return;
                    }

                    if(isTvsRadioButtonSelected){
                        if(!isSeasonAndEpisodeSelected){
                           return;
                        }

                    }


                    String seasonAndEpisode;

                    if(isMovieRadioButtonSelected){
                        header = (String) movieNamesComboBox.getSelectedItem();
                        nameOfSavedPdf += header;
                        seasonAndEpisode = "MOVIE";
                    }else if (isTvsRadioButtonSelected) {
                        
                        seasonAndEpisode = seasonAndEpisodeComboBox.getSelectedItem().toString();
                        header = movieNamesComboBox.getSelectedItem().toString() + " | " + seasonAndEpisode;
                        nameOfSavedPdf += header;
                    }else{
                        return;
                    }

                    if(seasonAndEpisode.equals("ALL")){
                        idForStudying = dbQuery.returnIdOfAllEpisodesForStudying(learned1, learned2, nameOfMovie);
                    }else{

                        idForStudying = dbQuery.returnIdForStudying(learned1, learned2, nameOfMovie, seasonAndEpisode);
                    }
                }
                
                
                
        double number = Math.random()*100;
        nameOfSavedPdf += "_" + String.valueOf(number);
        
        
        String locationToSave = savingLocation+"/" +nameOfSavedPdf+".pdf";
        try {
            
            
            try {
                writer = PdfWriter.getInstance(document, new FileOutputStream(locationToSave));
                HeaderFooterPageEvent event = new HeaderFooterPageEvent();
                writer.setPageEvent(event);
                document.open();
                Font boldFont = new Font();
                boldFont.setStyle(Font.BOLD);
                Chunk word = new Chunk("word : ", boldFont);
                Chunk sentence = new Chunk("sentence : ", boldFont);
                Chunk meaning = new Chunk("meaning : ", boldFont);
                Paragraph allContent = new Paragraph();
                
                           
                iteratorForStudying = idForStudying.listIterator();
                               
                while(iteratorForStudying.hasNext()){
                    index = iteratorForStudying.next();
                    String wordContent = dbQuery.returnWordForStudying(index);
                    String sentenceContent = dbQuery.returnSentenceForStudying(index);
                    String meaningContent = dbQuery.returnMeaningForStudying(index);
                    
                    
                    allContent.add(word);
                    allContent.add(wordContent);   
                    allContent.add(Chunk.NEWLINE);
                    allContent.add(sentence);
                    allContent.add(sentenceContent);                    
                    allContent.add(Chunk.NEWLINE);
                    allContent.add(meaning);
                    allContent.add(meaningContent);                    
                    allContent.add(Chunk.NEWLINE);
                    allContent.add(Chunk.NEWLINE);
                                  
                }
                

                document.add(allContent);
                document.close();
            
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
          
        } catch (DocumentException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
   
        
    }//GEN-LAST:event_getPdfButtonActionPerformed



    
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel StudyingJPanel;
    private javax.swing.JLabel alreadyKnownWordsLabel;
    private javax.swing.JLabel beingLearnedWordsLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox<String> episodeComboBox;
    private javax.swing.JButton getPdfButton;
    private javax.swing.JRadioButton isMovieRadioButton;
    private javax.swing.JRadioButton isTvSeriesRadioButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel learnedWordsLabel;
    private javax.swing.JLabel meaningLabelForStudying;
    private javax.swing.JTextArea meaningTextField;
    private javax.swing.JComboBox<String> movieNamesComboBox;
    private javax.swing.JTextField nameOfTvSeriesOrMovieTextField;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton nextWordButton;
    private javax.swing.JTextField oxfordApiId;
    private javax.swing.JTextField oxfordApiKey;
    private javax.swing.JTextField pharasalVerbTextField;
    private javax.swing.JButton saveAsLearned;
    private javax.swing.JButton savingPharasal;
    private javax.swing.JButton savingWordButton;
    private javax.swing.JComboBox<String> seasonAndEpisodeComboBox;
    private javax.swing.JComboBox<String> seasonComboBox;
    private javax.swing.JTextField sentenceField;
    private javax.swing.JLabel sentenceLabelForStudying;
    private javax.swing.JButton showMeaningButton;
    private javax.swing.JButton startSavingButton;
    private javax.swing.JRadioButton studyingMovieRadioButton;
    private javax.swing.JRadioButton studyingTvSeriesRadioButton;
    private javax.swing.JButton subtitleChooser;
    private javax.swing.JTextField subtitlePath;
    private javax.swing.JButton unsaveAsLearned;
    private javax.swing.JComboBox<String> wordConditionComboBox;
    private javax.swing.JTextField wordField;
    private javax.swing.JLabel wordLabelForStudying;
    // End of variables declaration//GEN-END:variables

    private Font Font(int BOLD) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
